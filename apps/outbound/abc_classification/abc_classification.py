from copy import deepcopy
import streamlit as st

from .settings import *
from . import are_there_dataframes, no_dataframe_yet
from .report_generator import create_abc_orderline_report
from .report_dashboard import abc_pickline_dash
from .export_data import export_data_page
from apps.widgets import dtframe

def initialize_data():
    # All data generated by this app will be store here
    if ABC_CLASS not in st.session_state:
        st.session_state[ABC_CLASS] = dict()

def page_intro():
    st.markdown('## ABC Classification')
    with st.expander('More Info'):
        text = """
        ABC classification is a method used in inventory management and logistics to categorize items based on their importance to the organization. 
        The classification is usually based on the items' annual consumption value, sales value, or other relevant criteria.

        The method consists of grouping items into three categories, A, B, and C, where:

        **A** items are the most important and represent a small percentage of the total items but a large percentage of the total value. 
        These items are considered to be critical to the organization and require close management and attention.

        **B** items are the next most important and represent a moderate percentage of the total items and value. 
        These items are considered to be important, but not as critical as "A" items.

        **C** items are the least important and represent the largest percentage of the total items but the smallest percentage of the total value. 
        These items are considered to be less critical to the organization and require less management and attention.
        
        ABC classification helps organizations to identify and prioritize their inventory, allowing them to allocate resources and focus on the items that are most important to the business.
        """
        st.markdown(text)


def select_outbound_dataframe():
    global file_name, df
    file_name, df = dtframe.select_dataframe('Outbound Dataframe')
    dtframe.display_dataframe(df, file_name)
    st.markdown('---')

def select_orderline_relevant_columns():
    st.markdown('### Select Relevant Columns')
    options = list(df.columns)
    qty_col = st.selectbox('Select Quantity Column:', options)
    options = deepcopy(options)
    options.remove(qty_col)
    sku_col = st.selectbox('Select SKU Column:', options)
    options = deepcopy(options)
    options.remove(sku_col)
    order_col = st.selectbox('Select Order Reference Column:', options)
    # Pack selection
    selected_cols = {
        QTY:qty_col,
        SKU_ID: sku_col,
        N_ORDERS: order_col,
    }
    st.markdown('---')
    return selected_cols

def main_section(selected_cols: dict):
    tab1, tab2, tab3 = st.tabs(['Generate Report(s)', 'Dashboard', 'Export Data'])

    with tab1:
        create_abc_orderline_report(df, selected_cols)

    with tab2:
        abc_pickline_dash()

    with tab3:
        export_data_page()

def abc_classification_page():
    """
    Creates an interactive page for ABC classification analysis of outbound orders
    
    This function creates an interactive page for analyzing the ABC classification of outbound orders. It uses other functions
    'initialize_data()', 'page_intro()' and 'are_there_dataframes()' to check and set up the data. If dataframes are available,
    it calls the functions 'select_outbound_dataframe()', 'select_orderline_relevant_columns()', and 'main_section(selected_cols)'
    to create the interactive page, which allows users to select the dataframe and relevant columns to analyze and 
    generate an ABC classification report.
    If there is no dataframe yet, it calls another function 'no_dataframe_yet()'
    
    Returns:
        None: This function does not return anything.
    """
    initialize_data()
    page_intro()
    if are_there_dataframes():
        select_outbound_dataframe()
        selected_cols = select_orderline_relevant_columns()
        main_section(selected_cols)
    else:
        no_dataframe_yet()