from copy import deepcopy

import streamlit as st
import pandas as pd
import numpy as np

# Main app imports
from . import are_there_dataframes, no_dataframe_yet
# Local folder imports
from . import utils as ut
from . plot import qty_pie_with_slider
# Constants
from .settings import QTY, N_OLS, N_ORDERS


def initialize_data():
    # All data generated by this app will be store here
    if 'ol_pattern' not in st.session_state:
        st.session_state['ol_pattern'] = dict()

def select_outbound_dataframe():
    st.markdown('### Select Outbound Dataframe')
    global df
    label = 'Please select outbound dataframe:'
    options = st.session_state.dataframe.keys()
    selected = st.selectbox(label, options)
    df = st.session_state.dataframe[selected]
    st.info(f'{selected} - Selected!')
    st.dataframe(df.head())
    st.markdown('---')

def select_orderline_relevant_columns():
    st.markdown('### Select Relevant Columns')
    options = list(df.columns)
    qty_col = st.selectbox('Select Quantity Column:', options)
    options = deepcopy(options)
    options.remove(qty_col)
    sku_col = st.selectbox('Select SKU Column:', options)
    options = deepcopy(options)
    options.remove(sku_col)
    order_col = st.selectbox('Select Order Reference Column:', options)
    # Pack selection
    selected_cols = {
        QTY:qty_col,
        N_OLS: sku_col,
        N_ORDERS: order_col,
    }
    st.markdown('---')
    return selected_cols


def whole_dataset_report(selected_cols: dict, **kwargs):
    st.markdown('### General - Whole Dataset')
    with st.expander('More Info'):
        text = """
        Brief Explanation Here
        """
        st.markdown(text)
    if st.button('Process Data'):
        # 1. Create first pivot table
        with st.spinner('Running...'):
            pt = df.pivot_table(
                                index=selected_cols[N_ORDERS],
                                aggfunc={
                                    selected_cols[QTY]:'sum', 
                                    selected_cols[N_OLS]:'nunique'
                                    }
                            )
            pt.reset_index(inplace=True)
        st.success('First Pivot Table Done!')
        # 2. 2nd pivot table with quantity column as index
        with st.spinner(''):

            # Rename pivot table columns to consistent naming
            rename_dict = ut.renaming_dict(selected_cols)
            pt.rename(columns=rename_dict, inplace=True)
            
            # Get totals
            total_qty = pt[QTY].sum()
            total_ol = pt[N_OLS].sum()
            total_orders = pt.shape[0]

            # Generate quantity report
            qty_report = pt.pivot_table(
                                        index=QTY, 
                                        aggfunc={N_ORDERS:'nunique', 
                                                 N_OLS:'sum'
                                            }
                                    )
        st.success('Done!')
        with st.spinner('Generating final report...'):

            # Generate cumulative sum table
            qty_cumsum_report = qty_report.cumsum()
            ut.append_to_colname(qty_cumsum_report, '_CS')

            # Concatenate cumulative sum table with original report
            qty_report_w_cs = pd.concat([qty_report, qty_cumsum_report], axis=1)

            # Create dataframe divisor to compute percentages
            ol_col = [total_ol for x in range(qty_report.shape[0])]
            orders_col = [total_orders for x in range(qty_report.shape[0])]
            data = np.matrix([ol_col, orders_col, ol_col, orders_col,]).transpose()
            divide_df = pd.DataFrame(index=qty_report_w_cs.index, data=data, columns=qty_report_w_cs.columns)

            # Compute percentages actual and cumulative
            qty_report_percentage = np.round(qty_report_w_cs.divide(divide_df, axis=1) * 100, 2)
            ut.append_to_colname(qty_report_percentage, '_%')

            # Create final report
            qty_final = pd.concat([qty_report_w_cs, qty_report_percentage],axis=1)
        st.success('Final Report Ready!')    
        st.dataframe(qty_final)
        st.dataframe(qty_report_percentage)
        qty_pie_with_slider(qty_final)


    st.markdown('---')


def page_intro():
    st.markdown('## Orderline Pattern')
    with st.expander('More Info'):
        text = """
        Brief explanation here.
        """
        st. markdown(text)


def orderline_pattern_page():
    initialize_data()
    page_intro()
    if are_there_dataframes():
        select_outbound_dataframe()
        selected_cols = select_orderline_relevant_columns()
        whole_dataset_report(selected_cols)
        st.markdown('### Group Specific')
    else:
        no_dataframe_yet()
